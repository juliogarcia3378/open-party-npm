/**
 * OpenParty API
 * Move your app forward with the OpenParty API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Event', 'model/Venue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Event'), require('../model/Venue'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenPartyApi) {
      root.OpenPartyApi = {};
    }
    root.OpenPartyApi.VenueApi = factory(root.OpenPartyApi.ApiClient, root.OpenPartyApi.Error, root.OpenPartyApi.Event, root.OpenPartyApi.Venue);
  }
}(this, function(ApiClient, Error, Event, Venue) {
  'use strict';

  /**
   * Venue service.
   * @module api/VenueApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VenueApi. 
   * @alias module:api/VenueApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the venuesGet operation.
     * @callback module:api/VenueApi~venuesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Venue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Venues by Type and Date
     * The Venue endpoint returns an array of venues filtered by date and type of venue (nightclub or poolparty). Each venue includes  information such as name, display name, type, features, logo among other details.
     * @param {module:model/String} type Type can be only &#39;nightclub&#39; or &#39;poolparty&#39;.
     * @param {Object} opts Optional parameters
     * @param {Date} opts._date Format for Date should be mm/dd/yy.
     * @param {module:api/VenueApi~venuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Venue>}
     */
    this.venuesGet = function(type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling venuesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
        'date': opts['_date']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Venue];

      return this.apiClient.callApi(
        '/venues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the venuesIdGet operation.
     * @callback module:api/VenueApi~venuesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Venue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Venue by a given id
     * The Venues endpoint returns information about a venue by given id. The response includes the display name and other details about the venue.
     * @param {Number} id Id for the venue.
     * @param {module:api/VenueApi~venuesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Venue>}
     */
    this.venuesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling venuesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Venue];

      return this.apiClient.callApi(
        '/venues/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the venuesIdTablepricingGet operation.
     * @callback module:api/VenueApi~venuesIdTablepricingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Bottle Service Tables by a venue in a given date
     * The tablepricing endpoint returns an array with information about bottle service tables in a given date. The response includes the prices, capacity for tables among other details.
     * @param {Number} id Id for selected venue.
     * @param {Date} _date Date given for retrieve tables.
     * @param {module:api/VenueApi~venuesIdTablepricingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.venuesIdTablepricingGet = function(id, _date, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling venuesIdTablepricingGet");
      }

      // verify the required parameter '_date' is set
      if (_date == undefined || _date == null) {
        throw new Error("Missing the required parameter '_date' when calling venuesIdTablepricingGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'date': _date
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/venues/{id}/tablepricing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
